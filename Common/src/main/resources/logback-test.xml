<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别
    trace < debug < info < warn < error
    若定义的日志级别为info，则不会打印出 trace和debug的相关日志
-->
<configuration>
    <!-- 定义全局参数常量 -->
    <property name="log.level" value="debug"/>
    <!-- 定义日志存储的地址 -->
    <property name="log.filePath" value="/Users/csthink/IdeaProjects/MyBatis-Basic/logs/common"/>
    <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %file 文件名 %line 行号 %msg：日志消息，%n是换行符-->
    <property name="log.pattern" value="[%d{yyyy-MM-dd HH:mm:ss.SSS}] %-5level [%thread] %logger{50} %method %line - %msg%n"/>
    <!-- 30表示30个 -->
    <property name="log.maxHistory" value="30"/>

    <!-- 控制台打印日志内容 -->
    <appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
        <!-- encoder的默认实现类是 ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->
        <encoder>
            <!-- 格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
            <!--<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{5} - %msg%n</pattern>-->
            <pattern>[%date{yyyy-MM-dd HH:mm:ss.SSS}] %X{logthreadId} %-5level %logger{80} %method %line - %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="debugAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 当前的日志文件存放路径 -->
        <File>${log.filePath}/debug.log</File>
        <append>true</append>
        <!-- 过滤器，只接受DEBUG级别的日志信息，其余全部过滤掉 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 日志滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 历史日志文件的存放路径和名称 -->
            <!--<fileNamePattern>${log.filePath}/debug.log.%d</fileNamePattern>-->
            <fileNamePattern>${log.filePath}/debug.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <!-- 日志文件最大的保存历史 数量 -->
            <maxHistory>${log.maxHistory}</maxHistory>
            <maxFileSize>1KB</maxFileSize>
        </rollingPolicy>
        <!-- 日志文件中日志的格式 -->
        <encoder charset="UTF-8">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %file 文件名 %line 行号 %msg：日志消息，%n是换行符-->
            <pattern>${log.pattern}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="infoAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${log.filePath}/info.log</File>
        <append>true</append>
        <!-- 过滤器,只打INFO级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--<fileNamePattern>${log.filePath}/info.log.%d</fileNamePattern>-->
            <fileNamePattern>${log.filePath}/info.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>

        <encoder charset="UTF-8">
            <pattern>${log.pattern}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="errorAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${log.filePath}/error.log</File>
        <append>true</append>
        <!--过滤器,只打ERROR级别的日志-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--<fileNamePattern>${log.filePath}/error.log.%d</fileNamePattern>-->
            <fileNamePattern>${log.filePath}/error.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <maxHistory>12</maxHistory>
        </rollingPolicy>

        <encoder charset="UTF-8">
            <pattern>${log.pattern}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="smsAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${log.filePath}/sms/sms_info.log</File>
        <append>true</append>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.filePath}/sms/sms_info.log.%d</fileNamePattern>
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder charset="UTF-8">
            <pattern>${log.pattern}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <append>false</append>
        <prudent>false</prudent>
    </appender>

    <!-- logger标签用于和appender进行绑定，并告诉logback哪些包（name属性）的日志信息需要记录 -->
    <!-- name 值可以是包名或具体的类名：该包（包括子包）下的类或该类将采用此logger -->
    <!-- logger将会继承root标签，在加上additivity="false"的属性后 root标签中的level将会被logger的level覆盖, 可避免因继承自root日志会打印两遍的问题 -->
    <logger name="com.csthink" level="${log.level}" additivity="false">
        <appender-ref ref="consoleAppender"/>
        <appender-ref ref="debugAppender"/>
        <appender-ref ref="smsAppender"/>
        <appender-ref ref="errorAppender"/>
    </logger>

    <root level="INFO">
        <appender-ref ref="consoleAppender"/>
    </root>

</configuration>